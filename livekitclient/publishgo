package livekitclient

import (
	"bytes"
	"fmt"
	"time"

	"github.com/gen2brain/x264-go"
	lksdk "github.com/livekit/server-sdk-go"
	"github.com/minskylab/calab"
	"github.com/minskylab/calab/experiments"
	"github.com/minskylab/calab/experiments/petridish"
	"github.com/minskylab/calab/spaces/board"
	"github.com/minskylab/calab/systems/lifelike"
	"github.com/pion/webrtc/v3"
	"github.com/pion/webrtc/v3/pkg/media"
)

func basicLifeLike(w, h int, lifeRule *lifelike.Rule) *petridish.PetriDish {
	dynamic := lifelike.MustNew(lifeRule, lifelike.ToroidBounded, lifelike.MooreNeighborhood(1, false))
	space := board.MustNew(w, h).Fill(board.UniformNoise, dynamic)

	return petridish.NewDefault(calab.BulkDynamicalSystem(space, dynamic))
}

func main() {
	gameOfLife := basicLifeLike(256, 256, lifelike.GameOfLifeRule)

	experiment := experiments.New()

	experiment.AddPetriDish(gameOfLife)

	fmt.Printf("gameOfLife id: %s\n", gameOfLife.ID)

	frames, err := experiment.Observe(gameOfLife.ID)
	if err != nil {
		panic(err)
	}

	go gameOfLife.Run(30 * time.Minute)

	host := "ws://ip:7880"
	apiKey := "--"
	apiSecret := "---"
	roomName := "myroom"
	identity := "botuser"

	room, err := lksdk.ConnectToRoom(host, lksdk.ConnectInfo{
		APIKey:              apiKey,
		APISecret:           apiSecret,
		RoomName:            roomName,
		ParticipantIdentity: identity,
	})
	if err != nil {
		panic(err)
	}

	time.Sleep(5 * time.Second)

	buf := bytes.NewBuffer([]byte{})

	opts := &x264.Options{
		Width:     256,
		Height:    256,
		FrameRate: 30,
		Tune:      "zerolatency",
		Preset:    "veryfast",
		Profile:   "baseline",
		// LogLevel:  x264.LogDebug,
	}

	enc, err := x264.NewEncoder(buf, opts)
	if err != nil {
		panic(err)
	}

	track, err := webrtc.NewTrackLocalStaticSample(webrtc.RTPCodecCapability{MimeType: webrtc.MimeTypeH264}, "video", "pion")
	if err != nil {
		panic(err)
	}

	local, err := room.LocalParticipant.PublishTrack(track, "track test")
	if err != nil {
		panic(err)
	}

	local.SetMuted(true)

	for frame := range frames {

		if err := enc.Encode(frame); err != nil {
			panic(err)
		}

		track.WriteSample(media.Sample{
			Data:     buf.Bytes(),
			Duration: time.Second,
		})

		buf.Reset()
		fmt.Printf("mean tps: %.2f\n", gameOfLife.GetMeanTPS())
	}

	enc.Flush()
}
