package pion_stream

import (
	"context"
	"fmt"
	"os/exec"
	"strings"
	"sync"
	"time"

	"github.com/pion/interceptor"
	"github.com/pion/sdp/v3"
	"github.com/pion/webrtc/v3"
	"github.com/pion/webrtc/v3/pkg/media"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"github.com/xiangxud/rtmp_webrtc_server/config"
	"github.com/xiangxud/rtmp_webrtc_server/livekitclient"
	"github.com/xiangxud/rtmp_webrtc_server/log"
	"github.com/xiangxud/rtmp_webrtc_server/mqtt"
	enc "github.com/xiangxud/rtmp_webrtc_server/signal"
)

var Streams sync.Map

func Find(host, room string) bool {
	key := "webrtc://" + host + "/" + room
	if _, ok := Streams.Load(key); ok {
		return true
	}
	return false
}

func LoadAndDelStream(host, room string) *Stream {
	key := "webrtc://" + host + "/" + room
	if v, ok := Streams.LoadAndDelete(key); ok {
		if pion_stream, ok := v.(*Stream); ok {
			return pion_stream
		}
		return nil
	}
	return nil
}

type Stream struct {
	Host          string
	Room          string
	Display       string
	rtcUrl        string
	savePath      string
	ctx           context.Context
	cancel        context.CancelFunc
	pc            *webrtc.PeerConnection
	hasAudioTrack bool
	hasVideoTrack bool
	videoFinish   chan struct{}
	audioFinish   chan struct{}
	device        *livekitclient.Device
}

func (self *Stream) onTrack(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) error {
	// Send a PLI on an interval so that the publisher is pushing a keyframe
	codec := track.Codec()

	trackDesc := fmt.Sprintf("channels=%v", codec.Channels)
	if track.Kind() == webrtc.RTPCodecTypeVideo {
		trackDesc = fmt.Sprintf("fmtp=%v", codec.SDPFmtpLine)
	}
	logrus.Infof("Got track %v, pt=%v tbn=%v, %v", codec.MimeType, codec.PayloadType, codec.ClockRate, trackDesc)
	// var err error
	// if codec.MimeType == "audio/opus" {
	// 	var da media.Writer
	// 	defer func() {
	// 		if da != nil {
	// 			da.Close()
	// 		}
	// 	}()
	// 	audiopath := self.savePath + self.Display + "_audio.ogg"
	// 	if da, err = oggwriter.New(audiopath, codec.ClockRate, codec.Channels); err != nil {
	// 		return errors.Wrapf(err, "创建"+audiopath+"失败")
	// 	}
	// 	self.hasAudioTrack = true
	// 	logrus.Infof("Open ogg writer file=%v , tbn=%v, channels=%v", audiopath, codec.ClockRate, codec.Channels)
	// 	if err = self.writeTrackToDisk(da, track); err != nil {
	// 		return err
	// 	}
	// 	self.audioFinish <- struct{}{}
	// } else if codec.MimeType == "video/H264" {
	// 	var dv_h264 media.Writer
	// 	videopath := self.savePath + self.Display + "_video.h264"

	// 	if dv_h264, err = h264writer.New(videopath); err != nil {
	// 		return err
	// 	}
	// 	logrus.Infof("Open h264 writer file=%v", videopath)
	// 	self.hasVideoTrack = true
	// 	if err = self.writeTrackToDisk(dv_h264, track); err != nil {
	// 		return err
	// 	}
	// 	self.audioFinish <- struct{}{}
	// } else {
	// 	logrus.Warnf("Ignore track %v pt=%v", codec.MimeType, codec.PayloadType)
	// }

	// codec := track.Codec()
	if strings.EqualFold(codec.MimeType, webrtc.MimeTypeOpus) {
		// fmt.Println("Got Opus track, saving to disk as output.opus (48 kHz, 2 channels)")
		// saveToDisk(oggFile, track)

		//转发音频数据包
		go func() {
			b := make([]byte, 1500)
			for {
				// Read
				n, _, readErr := track.Read(b)
				if readErr != nil {
					panic(readErr)
				}

				for _, proom := range self.device.PRoomList {
					if proom != nil {
						// proom.TrackPublished(device.Streamname)
						// track.Read
						proom.TrackSendData(self.device.Streamname, "audio", b[:n], 20*time.Millisecond)
					}
				}
			}
		}()
	} else if strings.EqualFold(codec.MimeType, webrtc.MimeTypeH264) {
		//转发视频频数据包
		go func() {
			b := make([]byte, 1500)
			for {
				// Read
				n, _, readErr := track.Read(b)
				if readErr != nil {
					panic(readErr)
				}

				for _, proom := range self.device.PRoomList {
					if proom != nil {
						// proom.TrackPublished(device.Streamname)
						// track.Read
						track.PayloadType()
						proom.TrackSendData(self.device.Streamname, "video", b[:n], time.Second/30)
					}
				}
			}
		}()
	}

	return nil
}

func (self *Stream) writeTrackToDisk(w media.Writer, track *webrtc.TrackRemote) error {
	for self.ctx.Err() == nil {
		pkt, _, err := track.ReadRTP()
		//fmt.Println(filename, pkt.Timestamp)
		if err != nil {
			if self.ctx.Err() != nil {
				return nil
			}
			return err
		}

		if w == nil {
			continue
		}

		if err := w.WriteRTP(pkt); err != nil {
			if len(pkt.Payload) <= 2 {
				continue
			}
			logrus.Warnf("Ignore write RTP %vB err %+v\n", len(pkt.Payload), err)
		}
	}

	return self.ctx.Err()
}

func (self *Stream) Stop() bool {
	self.cancel()
	if self.hasAudioTrack {
		<-self.audioFinish
	}
	if self.hasVideoTrack {
		<-self.videoFinish
	}

	if self.hasVideoTrack && self.hasAudioTrack {
		audiopath := self.savePath + self.Display + "_audio.ogg"
		videopath := self.savePath + self.Display + "_video.h264"

		cmd := exec.Command("ffmpeg",
			"-i",
			audiopath,
			"-i",
			videopath,
			self.savePath+self.Display+".ts",
			"-y")
		if err := cmd.Run(); err != nil {
			logrus.Errorf("拼接音频和视频失败:%v", err)
			return false
		}
		return true
	}
	return false
}
func apiRtcRequest(msg *mqtt.Message, sdp *webrtc.SessionDescription, device *livekitclient.Device) (string, error) {
	req := &mqtt.Session{}

	req.DeviceId = device.Deviceid //msg.SeqID //config.Config.Mqtt.CLIENTID
	msg.SeqID = config.Config.Mqtt.CLIENTID
	msg.RtcSession = *sdp
	sdp_topic := mqtt.TOPIC_OFFER
	if sdp.Type == webrtc.SDPTypeOffer {
		req.Type = mqtt.CMDMSG_OFFER
		msg.Mode = mqtt.MODE_OFFER
		sdp_topic = mqtt.TOPIC_OFFER
	} else if sdp.Type == webrtc.SDPTypeAnswer {
		req.Type = mqtt.CMDMSG_OFFER
		msg.Mode = mqtt.MODE_ANSWER
		sdp_topic = mqtt.TOPIC_ANSWER
	}
	msg.Video = true //
	msg.Audio = true //
	msg.SeqID = device.Deviceid
	msg.Describestreamname = "testdevicestream"
	req.Data = enc.Encode(msg)
	sdpmsg := mqtt.PublishMsg{
		WEB_SEQID: config.Config.Mqtt.CLIENTID, //msg.SeqID,
		Topic:     sdp_topic,
		Msg:       req,
		BTodevice: true,
	}
	log.Debugf("sdp signale %s", msg.SeqID)
	mqtt.SendMsg(sdpmsg)
	if sdp.Type == webrtc.SDPTypeOffer {
		sdpanswer := <-mqtt.SDPCh
		return (*sdpanswer).RtcSession.SDP, nil
	} else {
		return "", nil
	}

}
func NewStream(host, room, display, savePath string, device *livekitclient.Device) (*Stream, error) {
	var err error
	pion_stream := &Stream{
		Host:          host,
		Room:          room,
		Display:       display,
		rtcUrl:        "webrtc://" + host + "/" + room + "/" + display,
		savePath:      savePath,
		hasAudioTrack: false,
		hasVideoTrack: false,
		videoFinish:   make(chan struct{}, 1),
		audioFinish:   make(chan struct{}, 1),
		device:        device,
	}
	pion_stream.ctx, pion_stream.cancel = context.WithCancel(context.Background())

	//创建PeerConncetion
	pion_stream.pc, err = newPeerConnection(webrtc.Configuration{})
	if err != nil {
		return nil, errors.Wrapf(err, "创建PeerConnection失败")
	}

	//设置方向
	pion_stream.pc.AddTransceiverFromKind(webrtc.RTPCodecTypeAudio, webrtc.RTPTransceiverInit{
		Direction: webrtc.RTPTransceiverDirectionRecvonly,
	})
	pion_stream.pc.AddTransceiverFromKind(webrtc.RTPCodecTypeVideo, webrtc.RTPTransceiverInit{
		Direction: webrtc.RTPTransceiverDirectionRecvonly,
	})

	//创建offer
	offer, err := pion_stream.pc.CreateOffer(nil)
	if err != nil {
		return nil, errors.Wrap(err, "创建Local offer失败")
	}

	// 设置本地sdp
	if err = pion_stream.pc.SetLocalDescription(offer); err != nil {
		return nil, errors.Wrap(err, "设置Local SDP失败")
	}
	msg := mqtt.Message{}
	// device := livekitclient.Device{
	// 	Deviceid: "device_1",
	// }
	// 设置远端SDP
	answer, err := apiRtcRequest(&msg, &offer, device)
	if err != nil {
		return nil, errors.Wrap(err, "SDP协商失败")
	}

	if err = pion_stream.pc.SetRemoteDescription(webrtc.SessionDescription{
		Type: webrtc.SDPTypeAnswer, SDP: answer,
	}); err != nil {
		return nil, errors.Wrap(err, "设置Remote SDP失败")
	}

	pion_stream.pc.OnTrack(func(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) {
		fmt.Println("------------------")
		err = pion_stream.onTrack(track, receiver)
		if err != nil {
			codec := track.Codec()
			logrus.Errorf("Handle  track %v, pt=%v\nerr %v", codec.MimeType, codec.PayloadType, err)
			pion_stream.cancel()
		}
		pion_stream.pc.Close()
	})

	pion_stream.pc.OnICEConnectionStateChange(func(state webrtc.ICEConnectionState) {
		logrus.Infof("ICE state %v", state)

		if state == webrtc.ICEConnectionStateFailed || state == webrtc.ICEConnectionStateClosed {
			if pion_stream.ctx.Err() != nil {
				return
			}

			logrus.Warnf("Close for ICE state %v", state)
			pion_stream.cancel()
			pion_stream.pc.Close()
		}
	})
	key := "webrtc://" + host + "/" + room
	Streams.Store(key, pion_stream)
	select {}
	//return pion_stream, nil
}

func newPeerConnection(configuration webrtc.Configuration) (*webrtc.PeerConnection, error) {
	m := &webrtc.MediaEngine{}
	if err := m.RegisterDefaultCodecs(); err != nil {
		return nil, err
	}

	for _, extension := range []string{sdp.SDESMidURI, sdp.SDESRTPStreamIDURI, sdp.TransportCCURI} {
		if extension == sdp.TransportCCURI {
			continue
		}
		if err := m.RegisterHeaderExtension(webrtc.RTPHeaderExtensionCapability{URI: extension}, webrtc.RTPCodecTypeVideo); err != nil {
			return nil, err
		}
	}

	// https://github.com/pion/ion/issues/130
	// https://github.com/pion/ion-sfu/pull/373/files#diff-6f42c5ac6f8192dd03e5a17e9d109e90cb76b1a4a7973be6ce44a89ffd1b5d18R73
	for _, extension := range []string{sdp.SDESMidURI, sdp.SDESRTPStreamIDURI, sdp.AudioLevelURI} {
		if extension == sdp.AudioLevelURI {
			continue
		}
		if err := m.RegisterHeaderExtension(webrtc.RTPHeaderExtensionCapability{URI: extension}, webrtc.RTPCodecTypeAudio); err != nil {
			return nil, err
		}
	}

	i := &interceptor.Registry{}
	if err := webrtc.RegisterDefaultInterceptors(m, i); err != nil {
		return nil, err
	}

	api := webrtc.NewAPI(webrtc.WithMediaEngine(m), webrtc.WithInterceptorRegistry(i))
	return api.NewPeerConnection(configuration)
}
